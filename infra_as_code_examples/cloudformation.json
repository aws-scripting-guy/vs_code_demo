{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "Reference template for running wordpress behind ELB with enforced SSL(https). Missing resource for ACM certificate, which needs to be set on ELB manually. Production stack running at us-east-1.zone ***"
  ,

  "Parameters" : {

    "KeyName": {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instances",
      "Type": "String",
      "NoEcho": "true",
      "MinLength": "1",
      "MaxLength": "255",
      "AllowedPattern" : "[\\x20-\\x7E]*",
      "ConstraintDescription" : "can contain only ASCII characters."
    },

    "DBName" : {
      "Default": "wordpress",
      "NoEcho": "true",
      "Description" : "The WordPress database name",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "64",
      "AllowedPattern" : "[a-zA-Z][a-zA-Z0-9]*",
      "ConstraintDescription" : "must begin with a letter and contain only alphanumeric characters."
    },

    "DBUsername" : {
      "Default": "admin",
      "NoEcho": "true",
      "Description" : "The WordPress database admin account username",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "16",
      "AllowedPattern" : "[a-zA-Z][a-zA-Z0-9]*",
      "ConstraintDescription" : "must begin with a letter and contain only alphanumeric characters."
    },

    "DBPassword" : {
      "NoEcho": "true",
      "Description" : "The WordPress database admin account password",
      "Type": "String",
      "MinLength": "8",
      "MaxLength": "41",
      "AllowedPattern" : "[a-zA-Z0-9]*",
      "ConstraintDescription" : "must contain only alphanumeric characters."
    },

    "DBAllocatedStorage" : {
      "Default": "5",
      "Description" : "The size of the database (Gb)",
      "Type": "Number",
      "MinValue": "5",
      "MaxValue": "1024",
      "ConstraintDescription" : "must be between 5 and 1024Gb."
    },

    "SSHLocation" : {
      "Description" : " The IP address range that can be used to SSH to the EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },

    "DomainName" : {
      "Description" : "Domain name which will be used for wordpress website.",
      "Type": "String",
      "Default": "us-east-1.zone",
      "ConstraintDescription": "must be a valid domain name."
    },

    "S3Bucket" : {
      "Description" : "Will create publicly visible S3 bucket.",
      "Type": "String",
      "Default" : "false",
      "AllowedValues": [ "true","false" ],
      "ConstraintDescription" : "boolean." 
    },

    "AvailabilityZone1" : {
      "Description" : " Availability Zone where subnets will be created.",
      "Type": "String",
      "ConstraintDescription": "must be Availability Zone available for region."
    },

    "AvailabilityZone2" : {
      "Description" : " Availability Zone where subnets will be created.",
      "Type": "String",
      "ConstraintDescription": "must be Availability Zone available for region."
    }

  },

  "Mappings" : {

    "AWSInstanceType2Arch" : {
      "t1.micro"    : { "Arch" : "PV64"   },
      "t2.micro"    : { "Arch" : "HVM64"  },
      "t2.small"    : { "Arch" : "HVM64"  },
      "t2.medium"   : { "Arch" : "HVM64"  },
      "m3.medium"   : { "Arch" : "PV64"   },
      "m3.large"    : { "Arch" : "PV64"   },
      "m3.xlarge"   : { "Arch" : "PV64"   },
      "m3.2xlarge"  : { "Arch" : "PV64"   }
    },

    "AWSRegionArch2AMI" : {
      "us-east-1"      : { "PV64" : "ami-7c807d14", "HVM64" : "ami-76817c1e" },
      "us-west-2"      : { "PV64" : "ami-1b3b462b", "HVM64" : "ami-d13845e1" },
      "us-west-1"      : { "PV64" : "ami-a8d3d4ed", "HVM64" : "ami-f0d3d4b5" },
      "eu-west-1"      : { "PV64" : "ami-672ce210", "HVM64" : "ami-892fe1fe" },
      "eu-central-1"   : { "PV64" : "ami-0600331b", "HVM64" : "ami-04003319" },
      "ap-southeast-1" : { "PV64" : "ami-56b7eb04", "HVM64" : "ami-a6b6eaf4" },
      "ap-northeast-1" : { "PV64" : "ami-25dd9324", "HVM64" : "ami-29dc9228" },
      "ap-southeast-2" : { "PV64" : "ami-6bf99c51", "HVM64" : "ami-d9fe9be3" },
      "sa-east-1"      : { "PV64" : "ami-c7e649da", "HVM64" : "ami-c9e649d4" },
      "us-gov-west-1"  : { "PV64" : "ami-ab4a2d88", "HVM64" : "ami-a54a2d86" },
      "cn-north-1"     : { "PV64" : "ami-cab82af3", "HVM64" : "ami-ccb82af5" }
    },

    "Region2AZ" : {
      "us-east-1" : { "AZ1" : "us-east-1b", "AZ2" : "us-east-1c" },
      "us-west-1" : { "AZ1" : "us-west-1a", "AZ2" : "us-west-1c" },
      "us-west-2" : { "AZ1" : "us-west-2a", "AZ2" : "us-west-2c" },
      "eu-west-1" : { "AZ1" : "eu-west-1a", "AZ2" : "eu-west-1c" },
      "eu-central-1" : { "AZ1" : "eu-central-1a", "AZ2" : "eu-central-1b" },
      "ap-southeast-1" : { "AZ1" : "ap-southeast-1a", "AZ2" : "ap-southeast-1b" },
      "ap-southeast-2" : { "AZ1" : "ap-southeast-2a", "AZ2" : "ap-southeast-2b" },
      "ap-northeast-1" : { "AZ1" : "ap-northeast-1a", "AZ2" : "ap-northeast-1c" },
      "sa-east-1" : { "AZ1" : "sa-east-1a", "AZ2" : "sa-east-1b" }
    }

  },

  "Conditions" : {

    "EnablePublicS3Bucket" : { "Fn::Equals" : [ {"Ref": "S3Bucket"}, "true"] }

  },

  "Resources" : {

    "VPC": {
            "Type" : "AWS::EC2::VPC",
            "Properties" : {
              "CidrBlock" : "10.0.0.0/16",
              "EnableDnsSupport" : true,
              "EnableDnsHostnames" : true,
                  "Tags" : [ {"Key" : "Name", "Value" : "wordpress-vpc"}]
            }
    },

    "InternetGateway" : {
             "Type" : "AWS::EC2::InternetGateway",
             "Properties" : {
                "Tags" : [ {"Key" : "Name", "Value" : "wordpress-igw"}]
             }
    },

    "AttachGateway" : {
             "Type" : "AWS::EC2::VPCGatewayAttachment",
             "Properties" : {
                "VpcId" : { "Ref" : "VPC" },
                "InternetGatewayId" : { "Ref" : "InternetGateway" }
             }
    },

    "PrivateSubnet1" : {
             "Type" : "AWS::EC2::Subnet",
             "Properties" : {
               "VpcId" : { "Ref" : "VPC" },
               "CidrBlock" : "10.0.1.0/24",
               "AvailabilityZone" : { "Ref" : "AvailabilityZone1" },
                 "Tags" : [ { "Key" : "Name", "Value" : "Private-subnet1" } ]
             }
    },

    "PrivateSubnet2" : {
             "Type" : "AWS::EC2::Subnet",
             "Properties" : {
               "VpcId" : { "Ref" : "VPC" },
               "CidrBlock" : "10.0.2.0/24",
               "AvailabilityZone" : { "Ref" : "AvailabilityZone2" },
                 "Tags" : [ { "Key" : "Name", "Value" : "Private-subnet2" } ]

             }
    },

    "PublicSubnet" : {
             "Type" : "AWS::EC2::Subnet",
             "Properties" : {
               "VpcId" : { "Ref" : "VPC" },
               "CidrBlock" : "10.0.3.0/24",
               "AvailabilityZone" : { "Ref" : "AvailabilityZone1" },
                 "Tags" : [ { "Key" : "Name", "Value" : "Public-subnet" } ]
             }
    },

    "PrivateRouteTable" : {
             "Type" : "AWS::EC2::RouteTable",
             "Properties" : {
                "VpcId" : { "Ref" : "VPC" },
                "Tags" : [ { "Key" : "Name", "Value" : "Private-rt" } ]
             }
    },

    "PublicRouteTable" : {
             "Type" : "AWS::EC2::RouteTable",
             "Properties" : {
                "VpcId" : { "Ref" : "VPC" },
                "Tags" : [ { "Key" : "Name", "Value" : "Public-rt" } ]
             }
    },

    "PublicRoute" : {
             "Type" : "AWS::EC2::Route",
             "Properties" : {
                "RouteTableId" : { "Ref" : "PublicRouteTable" },
                "DestinationCidrBlock" : "0.0.0.0/0",
                "GatewayId" : { "Ref" : "InternetGateway" }
             }
    },

    "PublicSubnetRouteTableAssociation" : {
             "Type" : "AWS::EC2::SubnetRouteTableAssociation",
             "Properties" : {
                "SubnetId" : { "Ref" : "PublicSubnet" },
                "RouteTableId" : { "Ref" : "PublicRouteTable" }
             }
    },

    "PrivateSubnetRouteTableAssociation1" : {
             "Type" : "AWS::EC2::SubnetRouteTableAssociation",
             "Properties" : {
                "SubnetId" : { "Ref" : "PrivateSubnet1" },
                "RouteTableId" : { "Ref" : "PrivateRouteTable" }
             }
    },

    "PrivateSubnetRouteTableAssociation2" : {
             "Type" : "AWS::EC2::SubnetRouteTableAssociation",
             "Properties" : {
                "SubnetId" : { "Ref" : "PrivateSubnet2" },
                "RouteTableId" : { "Ref" : "PrivateRouteTable" }
             }
    },

    "InstanceRole": {
             "Type": "AWS::IAM::Role",
             "Properties": {
                "AssumeRolePolicyDocument": {
                   "Version" : "2012-10-17",
                   "Statement": [ {
                      "Effect": "Allow",
                      "Principal": {
                         "Service": [ "ec2.amazonaws.com" ]
                      },
                      "Action": [ "sts:AssumeRole" ]
                   } ]
                },
                "Path": "/"
             }
    },

    "RolePolicies": {
             "Type": "AWS::IAM::Policy",
             "Properties": {
                "PolicyName": "instance_s3_access",
                "PolicyDocument": {
                   "Version" : "2012-10-17",
                   "Statement": [ {
                      "Effect": "Allow",
                      "Action": "s3:*",
                      "Resource": "*"
                   } ]
                },
                "Roles": [ {
                   "Ref": "InstanceRole"
                } ]
             }
    },

    "InstanceProfile": {
             "Type": "AWS::IAM::InstanceProfile",
             "Properties": {
                "Path": "/",
                "Roles": [ { "Ref": "InstanceRole" } ]
             }
    },

    "LaunchConfig" : {
            "Type" : "AWS::AutoScaling::LaunchConfiguration",
            "Metadata" : {
              "AWS::CloudFormation::Init" : {
                "config" : {
                  "packages" : {
                    "yum" : {
                      "httpd"     : [],
                      "php"       : [],
                      "php-mysql" : []
                    }
                  },
                  "sources" : {
                    "/var/www/html" : "http://wordpress.org/latest.tar.gz"
                  },
                  "files" : {
                    "/var/www/html/wordpress/wp-config.php" : {
                      "content" : { "Fn::Join" : ["", [
                        "<?php\n",
                        "define('DB_NAME',          '", {"Ref" : "DBName"}, "');\n",
                        "define('DB_USER',          '", {"Ref" : "DBUsername"}, "');\n",
                        "define('DB_PASSWORD',      '", {"Ref" : "DBPassword" }, "');\n",
                        "define('DB_HOST',          '", {"Fn::GetAtt" : ["DBInstance", "Endpoint.Address"]},"');\n",
                        "define('DB_CHARSET',       'utf8');\n",
                        "define('DB_COLLATE',       '');\n"
                      ]] },
                      "mode" : "000644",
                      "owner" : "root",
                      "group" : "root"
                    }
                  },
                  "services" : {
                    "sysvinit" : {
                      "httpd"    : { "enabled" : "true", "ensureRunning" : "true" },
                      "sendmail" : { "enabled" : "false", "ensureRunning" : "false" }
                    }
                  }
                }
              }
            },
            "Properties": {
              "ImageId" : "ami-c47459ae",
              "InstanceType"   : "t2.micro",
              "IamInstanceProfile" : { "Ref" : "InstanceProfile" },
              "KeyName"        : { "Ref" : "KeyName" },
              "AssociatePublicIpAddress" : true,
              "SecurityGroups" : [ {"Ref" : "WebServerSecurityGroup"} ],
              "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
                "#!/bin/bash\n",

                "# Update the packages","\n",
                "yum update -y","\n",

                "/opt/aws/bin/cfn-init -s ", { "Ref" : "AWS::StackId" }, " -r LaunchConfig ",
                "         --region ", { "Ref" : "AWS::Region" }, "\n",

                "# Setup correct file ownership\n",
                "chown -R apache:apache /var/www/html/wordpress\n",
                
                "# Add keys and salts to the config file\n",
                "wp_config=/var/www/html/wordpress/wp-config.php\n",
                "GET https://api.wordpress.org/secret-key/1.1/salt/ >> $wp_config\n",
                "echo \"define('WPLANG'            , '');\" >> $wp_config\n",
                "echo \"define('WP_DEBUG'          , false);\" >> $wp_config\n", 
                "echo \"\\$table_prefix  = 'wp_';\" >> $wp_config\n",
                "echo \"if ( !defined('ABSPATH') )\" >> $wp_config\n",
                "echo \"    define('ABSPATH', dirname(__FILE__) . '/');\" >> $wp_config\n",
                "echo \"require_once(ABSPATH . 'wp-settings.php');\" >> $wp_config\n",

                "# Apache virtual hosts config\n",
                "(",
                "cat << _EOF_\n",
                "Listen 443\n",
                "NameVirtualHost *:80\n",
                "\n",
                "<VirtualHost *:80>\n",
                "\tDocumentRoot /var/www/html/wordpress\n",
                "\tServerName ", { "Ref" : "DomainName" } ,"\n",
                "RewriteEngine On","\n",
                "SetEnvIfNoCase X-FORWARDED-PROTO \"^https$\" HTTPS","\n",
                "RewriteEngine On","\n",
                "</VirtualHost>\n",
                "\n",
                "NameVirtualHost *:443","\n",
                "\t<VirtualHost *:443>","\n",
                "\tDocumentRoot /var/www/html/wordpress","\n",
                "\tServerName ", { "Ref" : "DomainName" } ,"\n",
                "\tSetEnvIfNoCase X-FORWARDED-PROTO \"^https$\" HTTPS","\n",
                "\tRewriteEngine On","\n",
                "\t</VirtualHost>","\n",
                "_EOF_\n",
                ") >> /etc/httpd/conf/httpd.conf",
                "\n",
                "# Apache restart\n",
                "service httpd restart",

                "\n",

                "# Signal the resource completion","\n",
                "/opt/aws/bin/cfn-signal --success true --stack ", { "Ref" : "AWS::StackId" },
                " --region ", { "Ref" : "AWS::Region" }, " --resource WebServerGroup &> /home/ec2-user/cfn-signal.log","\n"

              ]]}}
            },
            "DependsOn" : [ "DBInstance", "PublicSubnet" ]
    },

    "WebServerGroup" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "AvailabilityZones" : [ { "Fn::FindInMap" : [ "Region2AZ", { "Ref" : "AWS::Region" }, "AZ1" ] } ],
        "LaunchConfigurationName" : { "Ref" : "LaunchConfig" },
        "MinSize" : "1",
        "MaxSize" : "1",
        "LoadBalancerNames" : [ { "Ref" : "ElasticLoadBalancer" } ],
        "VPCZoneIdentifier" : [ { "Ref" : "PublicSubnet" } ]
      },
      "DependsOn" : [ "DBInstance", "PublicSubnet", "AttachGateway", "LaunchConfig", "ElasticLoadBalancer" ],
      "CreationPolicy": {
            "ResourceSignal": {
              "Count": "1",
              "Timeout": "PT30M"
            }
      },
      "UpdatePolicy" : {
            "AutoScalingScheduledAction" : {
              "IgnoreUnmodifiedGroupSizeProperties" : "true"
              },
            "AutoScalingRollingUpdate" : {
              "PauseTime" : "PT10M",
              "WaitOnResourceSignals" : "true"
            }
      }
    },

    "DBInstance" : {
      "Type": "AWS::RDS::DBInstance",
      "DeletionPolicy": "Snapshot",
      "Properties": {
        "Engine"            : "MySQL",
        "DBInstanceClass"   : "db.t1.micro",
        "DBSnapshotIdentifier" : "arn:aws:rds:us-east-1:276905068387:snapshot:wordpress-ssl-enforced-works",
        "DBSecurityGroups"  : [{ "Ref" : "DBSecurityGroup" }],
        "AllocatedStorage"  : { "Ref" : "DBAllocatedStorage" },
        "PubliclyAccessible" : false,
        "DBSubnetGroupName" : { "Ref" : "DBSubnetGroup" },
        "MultiAZ": false
      }
    },

    "DBSecurityGroup": {
      "Type": "AWS::RDS::DBSecurityGroup",
      "Properties": {
        "EC2VpcId": { "Ref" : "VPC" },
        "DBSecurityGroupIngress": { "EC2SecurityGroupId": { "Ref": "WebServerSecurityGroup"} },
        "GroupDescription"      : "Frontend Access"
      }
    },

    "DBSubnetGroup" : {
         "Type" : "AWS::RDS::DBSubnetGroup",
         "Properties" : {
            "DBSubnetGroupDescription" : "DB Subnet Group",
            "SubnetIds" : [ { "Ref" : "PrivateSubnet1" }, { "Ref" : "PrivateSubnet2" } ]
         }
    },

    "WebServerSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable HTTP access from ELB via port 80 and SSH access",
        "SecurityGroupIngress" : [
          {"IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "SourceSecurityGroupId" : { "Ref": "ElbSecurityGroup" }},
          {"IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : { "Ref" : "SSHLocation"}}
        ],
        "VpcId" : { "Ref" : "VPC" }
      }
    },

    "ElbSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable HTTP access for ELB via port 80",
        "SecurityGroupIngress" : [
          {"IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "CidrIp" : "0.0.0.0/0"}
        ],
        "VpcId" : { "Ref" : "VPC" }
      }
    },

    "ElasticLoadBalancer" : {
          "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
          "Properties" : {
            "Scheme" : "internet-facing",
            "SecurityGroups" : [ { "Ref" : "ElbSecurityGroup" } ],
            "Subnets" : [ { "Ref" : "PublicSubnet" } ],
            "Listeners" : [ 
                {
              "LoadBalancerPort" : "80",
              "InstancePort" : "80",
              "Protocol" : "HTTP"
            },
            {
              "LoadBalancerPort" : "443",
              "InstancePort" : "80",
              "Protocol" : "HTTP"            
            }
            
             ],
            "HealthCheck" : {
              "Target" : "TCP:80",
              "HealthyThreshold" : "3",
              "UnhealthyThreshold" : "5",
              "Interval" : "30",
              "Timeout" : "5"
            }
          }
    },

    "myDNS" : {
        "Type" : "AWS::Route53::RecordSetGroup",
        "Properties" : {
          "Comment" : { "Fn::Join" : [ "", [ "Alias record for ", { "Ref" : "DomainName" } ] ] },
            "HostedZoneId" : "Z3IL38TNV56QE6",
            "RecordSets" : [{
                "Name" : { "Fn::Join" : [ "", [ { "Ref" : "DomainName" } ] ] },
                "Type" : "A",
                "AliasTarget" : {
                      "HostedZoneId" : { "Fn::GetAtt" : ["ElasticLoadBalancer", "CanonicalHostedZoneNameID"] },
                      "DNSName" : { "Fn::GetAtt" : ["ElasticLoadBalancer","CanonicalHostedZoneName"] },
                      "EvaluateTargetHealth" : true
                }
            }]
        }
    }


  },

  "Outputs" : {

    "URL" : {
      "Description": "LoadBalancer URL of the wordpress website.",
      "Value":  { "Fn::Join" : [ "", [ "http://", { "Fn::GetAtt" : [ "ElasticLoadBalancer", "DNSName" ]} ] ] }
    }

  }
}